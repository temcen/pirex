services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg15
    container_name: recommendation-postgres
    environment:
      POSTGRES_DB: recommendations
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./scripts/init-pgvector.sql:/docker-entrypoint-initdb.d/02-pgvector.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PgBouncer for connection pooling
  pgbouncer:
    image: pgbouncer/pgbouncer:1.24.1
    container_name: recommendation-pgbouncer
    environment:
      DATABASES_HOST: postgres
      DATABASES_PORT: 5432
      DATABASES_USER: postgres
      DATABASES_PASSWORD: postgres
      DATABASES_DBNAME: recommendations
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 100
      DEFAULT_POOL_SIZE: 25
    ports:
      - "6432:5432"
    depends_on:
      postgres:
        condition: service_healthy

  # Neo4j with Graph Data Science plugin
  neo4j:
    image: neo4j:5.12-enterprise
    container_name: recommendation-neo4j
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_PLUGINS: '["graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: gds.*
      NEO4J_dbms_security_procedures_allowlist: gds.*
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ./scripts/init-neo4j.cypher:/var/lib/neo4j/import/init.cypher
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Hot Cache (user sessions, rate limiting)
  redis-hot:
    image: redis:7-alpine
    container_name: recommendation-redis-hot
    command: redis-server --maxmemory 2gb --maxmemory-policy allkeys-lru --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_hot_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Redis Warm Cache (recommendations, metadata)
  redis-warm:
    image: redis:7-alpine
    container_name: recommendation-redis-warm
    command: redis-server --port 6380 --maxmemory 1gb --maxmemory-policy allkeys-lru --appendonly yes
    ports:
      - "6380:6380"
    volumes:
      - redis_warm_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6380", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Redis Cold Cache (embeddings, long-term data)
  redis-cold:
    image: redis:7-alpine
    container_name: recommendation-redis-cold
    command: redis-server --port 6381 --maxmemory 4gb --maxmemory-policy allkeys-lfu --appendonly yes
    ports:
      - "6381:6381"
    volumes:
      - redis_cold_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6381", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: recommendation-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log

  # Kafka for message bus
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: recommendation-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: recommendation-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Frontend service
  frontend:
    build: ./frontend
    container_name: recommendation-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - API_URL=http://localhost:8080
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: recommendation-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  redis_hot_data:
  redis_warm_data:
  redis_cold_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: recommendation-network